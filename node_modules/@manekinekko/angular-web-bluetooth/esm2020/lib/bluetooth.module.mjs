import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BluetoothCore } from './bluetooth.service';
import { BrowserWebBluetooth } from './platform/browser';
import { ConsoleLoggerService, NoLoggerService } from './logger.service';
import * as i0 from "@angular/core";
export function browserWebBluetooth() {
    return new BrowserWebBluetooth();
}
export function consoleLoggerServiceConfig(options) {
    if (options && options.enableTracing) {
        return new ConsoleLoggerService();
    }
    else {
        return new NoLoggerService();
    }
}
export function makeMeTokenInjector() {
    return new InjectionToken('AWBOptions');
}
export class WebBluetoothModule {
    static forRoot(options = {}) {
        return {
            ngModule: WebBluetoothModule,
            providers: [
                BluetoothCore,
                {
                    provide: BrowserWebBluetooth,
                    useFactory: browserWebBluetooth
                },
                {
                    provide: makeMeTokenInjector,
                    useValue: options
                },
                {
                    provide: ConsoleLoggerService,
                    useFactory: consoleLoggerServiceConfig,
                    deps: [makeMeTokenInjector]
                }
            ]
        };
    }
}
/** @nocollapse */ WebBluetoothModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: WebBluetoothModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ WebBluetoothModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.1.5", ngImport: i0, type: WebBluetoothModule, imports: [CommonModule] });
/** @nocollapse */ WebBluetoothModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: WebBluetoothModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: WebBluetoothModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXRvb3RoLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21hbmVraW5la2tvL2FuZ3VsYXItd2ViLWJsdWV0b290aC9zcmMvbGliL2JsdWV0b290aC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFekQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQU16RSxNQUFNLFVBQVUsbUJBQW1CO0lBQ2pDLE9BQU8sSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsT0FBbUI7SUFDNUQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtRQUNwQyxPQUFPLElBQUksb0JBQW9CLEVBQUUsQ0FBQztLQUNuQztTQUFNO1FBQ0wsT0FBTyxJQUFJLGVBQWUsRUFBRSxDQUFDO0tBQzlCO0FBQ0gsQ0FBQztBQUNELE1BQU0sVUFBVSxtQkFBbUI7SUFDakMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBS0QsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQXNCLEVBQUU7UUFDckMsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNULGFBQWE7Z0JBQ2I7b0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsVUFBVSxFQUFFLG1CQUFtQjtpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFVBQVUsRUFBRSwwQkFBMEI7b0JBQ3RDLElBQUksRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUM1QjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2tJQXJCVSxrQkFBa0I7bUlBQWxCLGtCQUFrQixZQUZuQixZQUFZO21JQUVYLGtCQUFrQixZQUZuQixZQUFZOzJGQUVYLGtCQUFrQjtrQkFIOUIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7aUJBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgQmx1ZXRvb3RoQ29yZSB9IGZyb20gJy4vYmx1ZXRvb3RoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCcm93c2VyV2ViQmx1ZXRvb3RoIH0gZnJvbSAnLi9wbGF0Zm9ybS9icm93c2VyJztcclxuXHJcbmltcG9ydCB7IENvbnNvbGVMb2dnZXJTZXJ2aWNlLCBOb0xvZ2dlclNlcnZpY2UgfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQVdCT3B0aW9ucyB7XHJcbiAgZW5hYmxlVHJhY2luZz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBicm93c2VyV2ViQmx1ZXRvb3RoKCkge1xyXG4gIHJldHVybiBuZXcgQnJvd3NlcldlYkJsdWV0b290aCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZUxvZ2dlclNlcnZpY2VDb25maWcob3B0aW9uczogQVdCT3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZW5hYmxlVHJhY2luZykge1xyXG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyU2VydmljZSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbmV3IE5vTG9nZ2VyU2VydmljZSgpO1xyXG4gIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZU1lVG9rZW5JbmplY3RvcigpIHtcclxuICByZXR1cm4gbmV3IEluamVjdGlvblRva2VuKCdBV0JPcHRpb25zJyk7XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFdlYkJsdWV0b290aE1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9uczogQVdCT3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxXZWJCbHVldG9vdGhNb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBXZWJCbHVldG9vdGhNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEJsdWV0b290aENvcmUsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQnJvd3NlcldlYkJsdWV0b290aCxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGJyb3dzZXJXZWJCbHVldG9vdGhcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IG1ha2VNZVRva2VuSW5qZWN0b3IsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQ29uc29sZUxvZ2dlclNlcnZpY2UsXHJcbiAgICAgICAgICB1c2VGYWN0b3J5OiBjb25zb2xlTG9nZ2VyU2VydmljZUNvbmZpZyxcclxuICAgICAgICAgIGRlcHM6IFttYWtlTWVUb2tlbkluamVjdG9yXVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19