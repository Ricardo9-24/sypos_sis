import { CurrencyPipe, DatePipe } from '@angular/common';
import { ElementRef, EventEmitter, OnInit, QueryList, SimpleChanges } from '@angular/core';
import 'jspdf-autotable';
import { ExcelService } from '../services/excel.service';
import { TableComponent } from '../component/table/table.component';
declare enum NumberFormat {
    NUM = "number",
    CUR = "currency"
}
declare enum AlignClass {
    LEFT = "text-align: start;",
    RIGHT = "text-align: end;"
}
declare enum FormatType {
    NUM = "number",
    CUR = "currency",
    DIF = "difference",
    COU = "count"
}
interface IReportConfig {
    title: string;
    subtitle: string;
    subject: string;
    sessionDate: Date;
    tableTitle: string;
    customHeader?: string[];
    customIndexRows?: number[];
    customTotalRows?: number[];
    customTotalFormatting?: NumberFormat[];
    customTotalType?: FormatType[];
    footLabel?: string;
}
interface IFooterConfig {
    customTotalRows?: number[];
    customTotalFormatting?: NumberFormat[];
    customTotalType?: FormatType[];
    customTotalAlign?: AlignClass[];
}
export declare class NextiLibDatatableComponent implements OnInit {
    private datePipe;
    private currencyPipe;
    private excelService;
    header: Array<any>;
    customHeader?: boolean;
    list: Array<any>;
    titleEmpty: string;
    title: string;
    titleXs: boolean;
    btnModal: boolean;
    recursos: any;
    selectFilter: any;
    hiddenActions: boolean;
    breadcrumbs: Array<any>;
    infoAdicional: Array<any>;
    linkBack: boolean;
    reportConfig?: IReportConfig;
    opOcultarBuscar: boolean;
    opOcultarFooter: boolean;
    footerConfig?: IFooterConfig;
    actionState: boolean;
    paginacion?: boolean;
    totalRegistros?: number;
    multFPP?: number;
    actualPage?: number;
    excelData?: any;
    multiTable: boolean;
    sections: boolean;
    isLoading?: boolean;
    onDelete: EventEmitter<any>;
    onUpdate: EventEmitter<any>;
    onActive: EventEmitter<any>;
    onShow: EventEmitter<any>;
    onShowEvent: EventEmitter<any>;
    onBack: EventEmitter<any>;
    onfilter: EventEmitter<any>;
    onNext: EventEmitter<any>;
    onReturn: EventEmitter<any>;
    inputSearch: ElementRef;
    datatable: QueryList<TableComponent>;
    data$: any[];
    dataPerm$: any[];
    originalList: Array<any>;
    footerRow: any[];
    filterSelected: any;
    constructor(datePipe: DatePipe, currencyPipe: CurrencyPipe, excelService: ExcelService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    onFilter(): void;
    onDeleteItem(item: any): void;
    onUpdateItem(item: any): void;
    onActiveItem(item: any): void;
    onShowItem(item: any): void;
    onShowItemEvent($event: any): void;
    onlyNumbers(event: any): boolean;
    customSearchBancoFn(term: string, item: any): any;
    customSearchCompaniesFn(term: string, item: any): any;
    filter(search: string): void;
    filterList(list: any, search: any): any;
    toCompareString(item: any, search: any): any;
    getReportHeader(): string[];
    getFormatDataToTreatment(item: any): any;
    getRawData(customTotalRows: any, formatedData: any, customTotalType: any, rawDataRow: any): void;
    getReportBody(): {
        tableData: any[];
        tableFooterData: any[];
    };
    generatePdf(): void;
    generateTxt(): void;
    getFooterData(): void;
    exportAsXLSX(): void;
    formatCurrencyToNumber(value: string): number;
    isNumber(value: any): boolean;
    trasposeMatrix(matrix: any): any;
    convertToJSON(array: any): any[];
    onBackItem(): void;
}
export {};
