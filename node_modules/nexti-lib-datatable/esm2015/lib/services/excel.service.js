import { Injectable } from '@angular/core';
import * as FileSaver from 'file-saver';
import * as XLSX from 'xlsx';
import { CurrencyPipe, DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';
export class ExcelService {
    constructor(datePipe, currencyPipe) {
        this.datePipe = datePipe;
        this.currencyPipe = currencyPipe;
    }
    exportAsExcelFile(data, excelFileName) {
        const formatData = this.formatData(data);
        const ws = XLSX.utils.aoa_to_sheet(formatData);
        const wscols = [
            { wch: 1 },
            { wch: 1 },
            { wch: 35 },
            { wch: 15 },
            { wch: 15 },
            { wch: 10 },
            { wch: 16 },
            { wch: 15 },
            { wch: 20 },
            { wch: 20 },
        ];
        ws['!cols'] = wscols;
        const wb = {
            Sheets: { data: ws },
            SheetNames: ['data'],
        };
        const excelBuffer = XLSX.write(wb, {
            bookType: 'xlsx',
            type: 'array',
        });
        this.saveAsExcelFile(excelBuffer, excelFileName);
    }
    saveAsExcelFile(buffer, fileName) {
        const data = new Blob([buffer], { type: EXCEL_TYPE });
        FileSaver.saveAs(data, fileName + '_' + new Date().getTime() + EXCEL_EXTENSION);
    }
    getTableRow(array, param, whiteSpace) {
        let rowsCobradas = [];
        const commonDateForStr = 'dd/MM/yyyy';
        array.forEach((f) => {
            if (f.data.length) {
                f.data.forEach((e, i) => {
                    const fechaEmi = this.datePipe.transform(e.FechaEmision, commonDateForStr);
                    const valorFact = this.currencyPipe.transform(e.importeTotal);
                    const fechaEmiRet = this.datePipe.transform(e.FechaEmisionRet, commonDateForStr);
                    const valorRet = this.currencyPipe.transform(e.importeTotalRet);
                    const valorTotal = this.currencyPipe.transform(e[param]);
                    let actualDataRow = [
                        e.Numdoc,
                        fechaEmi,
                        valorFact,
                        e.NumdocRet,
                        fechaEmiRet,
                        valorRet,
                        valorTotal,
                    ];
                    if (i == 0) {
                        rowsCobradas.push([...whiteSpace, f.rucEmpresa, ...actualDataRow]);
                        if (f.data.length == 1) {
                            rowsCobradas.push([...whiteSpace, f.razonSocial]);
                        }
                    }
                    else if (i == 1) {
                        rowsCobradas.push([...whiteSpace, f.razonSocial, ...actualDataRow]);
                    }
                    else {
                        rowsCobradas.push([...whiteSpace, '', ...actualDataRow]);
                    }
                });
            }
            const totalFact = this.currencyPipe.transform(f.totalFact);
            const totalRet = this.currencyPipe.transform(f.totalRet);
            const totalPagado = this.currencyPipe.transform(f.totalPagado);
            // subtotal
            rowsCobradas.push([
                ...whiteSpace,
                '',
                f.cantFact,
                '',
                totalFact,
                f.cantRet,
                '',
                totalRet,
                totalPagado,
            ]);
        });
        return rowsCobradas;
    }
    formatData(data) {
        const whiteSpace = ['', ''];
        const tableHeader = [
            ...whiteSpace,
            'RUC / RAZON SOCIAL',
            'Número Factura',
            'Fecha Factura',
            'Valor Factura',
            'Número Retención',
            'Fecha Retención',
            'Valor Retención',
            'Valor Total Pagado',
        ];
        const facturasCobradas = data.cobradas;
        const facturasPagadas = data.pagadas;
        const rowsCobradas = this.getTableRow(facturasCobradas, 'totalCobrado', whiteSpace);
        const rowsPagadas = this.getTableRow(facturasPagadas, 'totalPagado', whiteSpace);
        const rowTotalCobradas = [
            ...whiteSpace,
            'TOTAL FACTURAS COBRADAS',
            data.cantCobradas,
            '',
            this.currencyPipe.transform(data.sumCobradas),
            data.cantRetCobradas,
            '',
            this.currencyPipe.transform(data.sumRetCobradas),
            this.currencyPipe.transform(data.totalCobradas),
        ];
        const rowTotalPagadas = [
            ...whiteSpace,
            'TOTAL FACTURAS PAGADAS',
            data.cantPagadas,
            '',
            this.currencyPipe.transform(data.sumPagadas),
            data.cantRetPagadas,
            '',
            this.currencyPipe.transform(data.sumRetPagadas),
            this.currencyPipe.transform(data.totalPagadas),
        ];
        const netoTotalFor = this.currencyPipe.transform(data.netoTotal);
        const rowNetos = [
            ...whiteSpace,
            'VALORES NETOS',
            '',
            '',
            this.currencyPipe.transform(data.netoFact),
            '',
            '',
            this.currencyPipe.transform(data.netoRet),
            netoTotalFor,
        ];
        const rowPosicionNeta = [
            ...whiteSpace,
            'POSICION NETA DE LA EMPRESA',
            netoTotalFor,
        ];
        const actualFormatDate = this.datePipe.transform(Date.now(), 'dd/MM/YYYY HH:mm:ss');
        return [
            [],
            [],
            // prettier-ignore
            [...whiteSpace, 'SESIÓN DE COMPENSACIÓN DEFINITIVA', '', '', '', '', '', '', actualFormatDate],
            [...whiteSpace, 'REPORTE POR EMPRESA PARTICIPANTE'],
            [],
            // prettier-ignore
            [...whiteSpace, 'EMPRESA :', data.Ruc, data.razonSocial, '', '', '', 'FECHA COMPENSACIÓN', data.fechaSesion],
            [],
            [...whiteSpace, 'FACTURAS COBRADAS'],
            tableHeader,
            ...rowsCobradas,
            rowTotalCobradas,
            [],
            [],
            [...whiteSpace, 'FACTURAS PAGADAS'],
            tableHeader,
            ...rowsPagadas,
            rowTotalPagadas,
            [],
            [...whiteSpace, 'RESUMEN PROCESO DE COMPENSACIÓN'],
            // prettier-ignore
            [...whiteSpace, '', 'Número Facturas', '', 'Valor Facturas', 'Número Retenciones', '', 'Valor Retenciones', 'Valor Total'],
            [],
            rowTotalCobradas,
            rowTotalPagadas,
            rowNetos,
            [],
            rowPosicionNeta,
        ];
    }
}
ExcelService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExcelService_Factory() { return new ExcelService(i0.ɵɵinject(i1.DatePipe), i0.ɵɵinject(i1.CurrencyPipe)); }, token: ExcelService, providedIn: "root" });
ExcelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ExcelService.ctorParameters = () => [
    { type: DatePipe },
    { type: CurrencyPipe }
];
//# sourceMappingURL=data:application/json;base64,