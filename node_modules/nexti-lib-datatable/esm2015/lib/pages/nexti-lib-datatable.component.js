import { CurrencyPipe, DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild, ViewChildren, } from '@angular/core';
import * as jsPDF from 'jspdf';
import 'jspdf-autotable';
import { Angular2Txt } from 'angular2-txt/Angular2-txt';
import { ExcelService } from '../services/excel.service';
import { TableComponent } from '../component/table/table.component';
var NumberFormat;
(function (NumberFormat) {
    NumberFormat["NUM"] = "number";
    NumberFormat["CUR"] = "currency";
})(NumberFormat || (NumberFormat = {}));
var AlignClass;
(function (AlignClass) {
    AlignClass["LEFT"] = "text-align: start;";
    AlignClass["RIGHT"] = "text-align: end;";
})(AlignClass || (AlignClass = {}));
var FormatType;
(function (FormatType) {
    FormatType["NUM"] = "number";
    FormatType["CUR"] = "currency";
    FormatType["DIF"] = "difference";
    FormatType["COU"] = "count";
})(FormatType || (FormatType = {}));
export class NextiLibDatatableComponent {
    constructor(datePipe, currencyPipe, excelService) {
        this.datePipe = datePipe;
        this.currencyPipe = currencyPipe;
        this.excelService = excelService;
        this.titleXs = false;
        this.linkBack = false;
        this.actionState = false;
        this.paginacion = false;
        this.totalRegistros = 0;
        this.multFPP = 0;
        this.actualPage = 0;
        this.multiTable = false;
        this.sections = false;
        this.onDelete = new EventEmitter();
        this.onUpdate = new EventEmitter();
        this.onActive = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onShowEvent = new EventEmitter();
        this.onBack = new EventEmitter();
        this.onfilter = new EventEmitter();
        this.onNext = new EventEmitter();
        this.onReturn = new EventEmitter();
        this.data$ = new Array();
        // TODO mejorar, con un estado de header normalizado se puede prescindir de esta variable
        this.dataPerm$ = new Array();
        this.footerRow = [];
        this.filterSelected = null;
    }
    ngOnInit() {
        var _a;
        (_a = this.selectFilter) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
            if (element.selected) {
                this.filterSelected = element.value;
            }
        });
    }
    ngOnChanges(changes) {
        const { list } = changes;
        if ((list === null || list === void 0 ? void 0 : list.currentValue) !== (list === null || list === void 0 ? void 0 : list.previousValue)) {
            this.data$ = list === null || list === void 0 ? void 0 : list.currentValue;
            this.dataPerm$ = list === null || list === void 0 ? void 0 : list.currentValue;
            if (this.inputSearch)
                this.inputSearch.nativeElement.value = '';
        }
    }
    ngDoCheck() {
        var _a;
        (_a = this.datatable) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
            if (this.footerConfig)
                element.getFooterData();
        });
    }
    onFilter() {
        this.onfilter.emit(this.filterSelected);
    }
    onDeleteItem(item) {
        this.onDelete.emit(item);
    }
    onUpdateItem(item) {
        this.onUpdate.emit(item);
    }
    onActiveItem(item) {
        this.onActive.emit(item);
    }
    onShowItem(item) {
        this.onShow.emit(item);
    }
    onShowItemEvent($event) {
        this.onShowEvent.emit($event);
    }
    onlyNumbers(event) {
        return event.charCode >= 48 && event.charCode <= 57;
    }
    customSearchBancoFn(term, item) {
        term = term.toLowerCase();
        return item.bancorresponsal.toLowerCase().includes(term);
    }
    customSearchCompaniesFn(term, item) {
        term = term.toLowerCase();
        return (item.ruc.includes(term) || item.razonSocial.toLowerCase().includes(term));
    }
    filter(search) {
        if (this.multiTable) {
            let datafilter = [];
            for (const list of this.dataPerm$) {
                let data = this.filterList(list, search);
                datafilter.push(data);
            }
            this.data$ = datafilter;
        }
        else {
            this.data$ = this.filterList(this.dataPerm$, search);
        }
    }
    filterList(list, search) {
        return list.filter((lista) => {
            for (const row of lista) {
                if (typeof row === 'object') {
                    if ((row.title && this.toCompareString(row.title, search)) ||
                        (row.subtitle && this.toCompareString(row.subtitle, search))) {
                        return lista;
                    }
                }
                else if (this.toCompareString(row, search)) {
                    return lista;
                }
            }
        });
    }
    toCompareString(item, search) {
        return item
            .toString()
            .toUpperCase()
            .includes(search.toString().toUpperCase());
    }
    getReportHeader() {
        const { customHeader } = this.reportConfig;
        return customHeader
            ? customHeader
            : this.header.map((item) => {
                if (typeof item === 'object') {
                    return item.title;
                }
                else {
                    return item;
                }
            });
    }
    getFormatDataToTreatment(item) {
        if (typeof item === 'object') {
            if (item != null) {
                if (item.title && item.subtitle) {
                    return `${item.title}\n${item.subtitle}`;
                }
                else {
                    return item.title ? item.title : item.subtitle && item.subtitle;
                }
            }
            else {
                return '';
            }
        }
        else {
            return item;
        }
    }
    getRawData(customTotalRows, formatedData, customTotalType, rawDataRow) {
        if (customTotalRows && customTotalRows.length) {
            customTotalRows.forEach((customIndex, indexCol) => {
                formatedData.forEach((item, index) => {
                    if (customIndex === index) {
                        let returnItem = 0;
                        customTotalType.forEach((type, indexType) => {
                            if (indexCol === indexType) {
                                switch (type) {
                                    case FormatType.NUM:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = Number(item);
                                        }
                                        break;
                                    case FormatType.CUR:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = this.formatCurrencyToNumber(item);
                                        }
                                        break;
                                    case FormatType.COU:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = 1;
                                        }
                                        break;
                                    default:
                                        returnItem = 0;
                                }
                            }
                        });
                        rawDataRow.push(returnItem);
                    }
                });
            });
        }
    }
    getReportBody() {
        const { customIndexRows, customTotalRows, customTotalFormatting, customTotalType, footLabel, } = this.reportConfig;
        let tableData = [];
        let tableFooterData = [];
        let rawData = [];
        this.data$.forEach((itemArray) => {
            let tableDataRow = [];
            let rawDataRow = [];
            // Step 1: format - prepare dat
            const formatedData = itemArray.map((item) => this.getFormatDataToTreatment(item));
            // Step 2: Generate Filter data
            if (customIndexRows && customIndexRows.length) {
                customIndexRows.forEach((customIndex) => {
                    formatedData.forEach((item, index) => {
                        if (customIndex === index) {
                            tableDataRow.push(item);
                        }
                    });
                });
            }
            else {
                tableDataRow = formatedData;
            }
            // Step 3: Get raw data (values to totals)
            this.getRawData(customTotalRows, formatedData, customTotalType, rawDataRow);
            tableData.push(tableDataRow);
            rawData.push(rawDataRow);
        });
        if (customTotalRows && customTotalRows.length && rawData.length) {
            let procesedTotals = [];
            procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => itemArray.reduce((a, b) => a + b, 0));
            if (customTotalFormatting && customTotalFormatting.length) {
                procesedTotals = customTotalFormatting.map((format, index) => {
                    switch (format) {
                        case NumberFormat.CUR:
                            return this.currencyPipe.transform(procesedTotals[index]);
                        default:
                            return procesedTotals[index];
                    }
                });
            }
            procesedTotals = [[footLabel, ...procesedTotals]];
            tableFooterData = procesedTotals.length ? procesedTotals : null;
        }
        return {
            tableData,
            tableFooterData,
        };
    }
    generatePdf() {
        const pdf = new jsPDF.jsPDF();
        pdf.setProperties({
            title: 'Resultados Netos',
        });
        const { title, subtitle, subject, sessionDate, tableTitle } = this.reportConfig;
        const pageSize = pdf.internal.pageSize;
        const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();
        // Section I
        pdf.autoTable({
            body: [
                [title, this.datePipe.transform(Date.now(), 'dd/MM/yyyy HH:mm')],
                [
                    {
                        content: subtitle,
                        colSpan: 2,
                        styles: { fontSize: 12, fontStyle: 'normal' },
                    },
                ],
            ],
            showHead: false,
            theme: 'plain',
            styles: {
                fillColor: [48, 84, 150],
                textColor: 255,
                valign: 'bottom',
            },
            columnStyles: {
                0: { fontStyle: 'bold', fontSize: 13 },
                1: { fontSize: 11, halign: 'right' },
            },
        });
        // Section II left
        const lastTableY = pdf.lastAutoTable.finalY + 5;
        pdf.autoTable({
            body: [[subject]],
            showHead: false,
            theme: 'plain',
            startY: lastTableY,
            styles: {
                fillColor: [255, 255, 153],
                textColor: 0,
                valign: 'bottom',
                fontSize: 11,
                fontStyle: 'bold',
                overflow: 'hidden',
            },
            margin: { right: 100 },
        });
        // Section II right
        pdf.autoTable({
            body: [
                [
                    'SESION COMPENSACION:',
                    this.datePipe.transform(sessionDate, 'dd/MM/yy, HH:mm', 'UTC'),
                ],
            ],
            showHead: false,
            theme: 'plain',
            startY: lastTableY,
            styles: {
                fillColor: [255, 255, 153],
                textColor: 0,
                valign: 'bottom',
                fontSize: 10,
                overflow: 'hidden',
            },
            margin: { left: pageWidth - 90 },
            columnStyles: {
                1: { halign: 'right' },
            },
        });
        // Section III
        pdf.autoTable({
            body: [[tableTitle]],
            showHead: false,
            theme: 'plain',
            startY: pdf.lastAutoTable.finalY + 10,
            styles: {
                fillColor: [31, 78, 120],
                textColor: 255,
                valign: 'bottom',
                fontSize: 11,
                fontStyle: 'bold',
            },
        });
        const header = [this.getReportHeader()];
        const { tableData, tableFooterData } = this.getReportBody();
        // Section IV
        const tableRenderObj = {
            head: header,
            body: tableData,
            theme: 'striped',
            showHead: 'firstPage',
            showFoot: 'lastPage',
            startY: pdf.lastAutoTable.finalY,
            headStyles: { fillColor: [214, 220, 228], textColor: 0 },
            footStyles: { fillColor: [31, 78, 120], textColor: 255 },
            foot: tableFooterData.length ? tableFooterData : false,
            styles: { fontSize: 9 },
        };
        pdf.autoTable(tableRenderObj);
        // Open PDF document in browser's new tab
        // pdf.output('pdfobjectnewwindow');
        pdf.save();
    }
    generateTxt() {
        const header = this.getReportHeader();
        const options = {
            headers: header,
            fieldSeparator: ';',
            quoteStrings: '',
            decimalseparator: ',',
        };
        let { tableData, tableFooterData } = this.getReportBody();
        tableData = [header, ...tableData];
        tableData = tableFooterData.length
            ? [...tableData, ...tableFooterData]
            : tableData;
        const data = this.convertToJSON(tableData);
        new Angular2Txt(data, 'Resultados Netos', options);
    }
    getFooterData() {
        const { customTotalRows, customTotalFormatting, customTotalType, customTotalAlign, } = this.footerConfig;
        let tableFooterData = [];
        let rawData = [];
        this.data$.forEach((itemArray) => {
            let rawDataRow = [];
            // Step 1: format - prepare dat
            const formatedData = itemArray.map((item) => this.getFormatDataToTreatment(item));
            // Step 2: Get raw data (values to totals)
            this.getRawData(customTotalRows, formatedData, customTotalType, rawDataRow);
            rawData.push(rawDataRow);
        });
        if (customTotalRows && customTotalRows.length && rawData.length) {
            let procesedTotals = [];
            procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => itemArray.reduce((a, b) => a + b, 0));
            if (customTotalFormatting && customTotalFormatting.length) {
                procesedTotals = customTotalFormatting.map((format, index) => {
                    let value, align;
                    switch (format) {
                        case NumberFormat.CUR:
                            value = this.currencyPipe.transform(procesedTotals[index]);
                            break;
                        default:
                            value = procesedTotals[index];
                            break;
                    }
                    align = customTotalAlign[index];
                    return {
                        value,
                        align,
                    };
                });
            }
            tableFooterData = procesedTotals.length ? procesedTotals : null;
        }
        let finalFooterData = [];
        // Clear data
        if (customTotalRows && customTotalRows.length) {
            let cont = 0;
            for (let i = 0; i < this.header.length; i++) {
                let itemToPush;
                customTotalRows.forEach((customIndex) => {
                    if (customIndex === i) {
                        itemToPush = tableFooterData[cont];
                        cont++;
                    }
                });
                finalFooterData.push(itemToPush);
            }
        }
        this.footerRow = finalFooterData;
    }
    exportAsXLSX() {
        this.excelService.exportAsExcelFile(this.excelData, 'planilla_compensacion');
    }
    formatCurrencyToNumber(value) {
        if (value !== undefined && value !== null)
            return Number(String(value).replace(/[^0-9.-]+/g, ''));
    }
    isNumber(value) {
        let regex = /^\d*\.?\d*$/;
        return regex.test(value);
    }
    trasposeMatrix(matrix) {
        return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));
    }
    convertToJSON(array) {
        var objArray = [];
        for (var i = 1; i < array.length; i++) {
            objArray[i - 1] = {};
            for (var k = 0; k < array[0].length && k < array[i].length; k++) {
                var key = array[0][k];
                let actualElement = array[i][k];
                let el = actualElement;
                if (typeof actualElement === 'string') {
                    el = actualElement.replace(/\n/g, ' ');
                }
                else if (typeof actualElement === 'undefined') {
                    el = '';
                }
                objArray[i - 1][key] = el;
            }
        }
        return objArray;
    }
    onBackItem() {
        this.onBack.emit();
    }
}
NextiLibDatatableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nexti-lib-datatable',
                template: "<div class=\"card py-4 px-2 border-light shadow-sm h-full mh-100\">\r\n  <div\r\n    *ngIf=\"isLoading\"\r\n    class=\"spinner-container d-flex align-items-center flex-column text-primary\"\r\n  >\r\n    <div class=\"spinner-border spinner-size\" role=\"status\"></div>\r\n    <span class=\"mt-2 text-dark\">Cargando...</span>\r\n  </div>\r\n  <div class=\"card-body content h-full mh-100\">\r\n    <div class=\"content-header\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <div class=\"header-title\">\r\n          <div *ngIf=\"linkBack\">\r\n            <a class=\"btn primary\" (click)=\"onBackItem()\">\r\n              <h4>\r\n                <i aria-hidden=\"true\" class=\"bi bi-arrow-left back\"></i>\r\n              </h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <div *ngIf=\"breadcrumbs\">\r\n              <lib-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></lib-breadcrumbs>\r\n            </div>\r\n            <div>\r\n              <h5 [ngClass]=\"{ 'title-primary': true, 'text-small': titleXs }\">\r\n                {{ title }}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <ng-content></ng-content>\r\n          <button\r\n            *ngIf=\"reportConfig || excelData\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary dropdown-toggle\"\r\n            data-bs-toggle=\"dropdown\"\r\n          >\r\n            Exportar a\r\n          </button>\r\n          <ul class=\"dropdown-menu\">\r\n            <ng-container *ngIf=\"!excelData; else showExcelOption\">\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"generatePdf()\">PDF</a>\r\n              </li>\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"generateTxt()\">TXT</a>\r\n              </li>\r\n            </ng-container>\r\n            <ng-template #showExcelOption>\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"exportAsXLSX()\">EXCEL</a>\r\n              </li>\r\n            </ng-template>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <ng-container *ngIf=\"customHeader; else headerOne\">\r\n        <ng-content select=\"[custom-header]\"></ng-content>\r\n      </ng-container>\r\n      <ng-template #headerOne>\r\n        <div class=\"d-flex justify-content-between align-items-center my-4\">\r\n          <div class=\"datos\">\r\n            <div *ngIf=\"infoAdicional\">\r\n              <lib-titlesecondary\r\n                [infoAdicional]=\"infoAdicional\"\r\n              ></lib-titlesecondary>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex flex-row\" *ngIf=\"!opOcultarBuscar\">\r\n            <div\r\n              class=\"px-2 py-auto d-flex align-items-center\"\r\n              *ngIf=\"selectFilter\"\r\n            >\r\n              <select\r\n                [(ngModel)]=\"filterSelected\"\r\n                (change)=\"onFilter()\"\r\n                class=\"form-select custom-select\"\r\n                aria-label=\"filter\"\r\n              >\r\n                <option\r\n                  *ngFor=\"let item of selectFilter\"\r\n                  [selected]=\"item.selected\"\r\n                  [value]=\"item.value\"\r\n                >\r\n                  {{ item.label }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n            <form class=\"d-flex\">\r\n              <div class=\"input-group custom-input-group\">\r\n                <input\r\n                  #search\r\n                  type=\"text\"\r\n                  class=\"form-control custom-input-search\"\r\n                  placeholder=\"Buscar\"\r\n                  aria-label=\"search\"\r\n                  aria-describedby=\"basic-addon1\"\r\n                  (keyup)=\"filter($event.target.value)\"\r\n                />\r\n                <span\r\n                  class=\"input-group-text custom-gruop-text\"\r\n                  id=\"basic-addon1\"\r\n                  ><i aria-hidden=\"true\" class=\"bi bi-search\"></i\r\n                ></span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"multiTable; else oneTable\">\r\n      <div class=\"content-body\">\r\n        <nav class=\"nav-content\">\r\n          <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n            <button\r\n              *ngFor=\"let item of sections; index as i\"\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: i === 0 }\"\r\n              id=\"nav-{{ i }}-tab\"\r\n              data-bs-toggle=\"tab\"\r\n              [attr.data-bs-target]=\"'#nav-' + i\"\r\n              type=\"button\"\r\n              role=\"tab\"\r\n              aria-controls=\"nav-{{ i }}\"\r\n              aria-selected=\"true\"\r\n            >\r\n              {{ item }}\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        <div class=\"tab-content\" id=\"nav-tabContent\">\r\n          <div\r\n            *ngFor=\"let item of header; index as i\"\r\n            [ngClass]=\"{ active: i === 0, show: i === 0 }\"\r\n            class=\"tab-pane fade\"\r\n            id=\"nav-{{ i }}\"\r\n            role=\"tabpanel\"\r\n            aria-labelledby=\"nav-{{ i }}-tab\"\r\n          >\r\n            <nexti-lib-table\r\n              [title]=\"title\"\r\n              [titleEmpty]=\"titleEmpty\"\r\n              [header]=\"item\"\r\n              [data$]=\"data$[i]\"\r\n              [footerConfig]=\"footerConfig[i]\"\r\n              [recursos]=\"recursos\"\r\n              [actionState]=\"actionState\"\r\n              (onDelete)=\"onDeleteItem($event)\"\r\n              (onUpdate)=\"onUpdateItem($event)\"\r\n              (onActive)=\"onActiveItem($event)\"\r\n              (onShow)=\"onShowItem($event)\"\r\n              (onShowEvent)=\"onShowItemEvent($event)\"\r\n              [opOcultarFooter]=\"opOcultarFooter\"\r\n              [hiddenActions]=\"hiddenActions\"\r\n              [isLoading]=\"isLoading\"\r\n              [paginacion]=\"paginacion\"\r\n              [totalRegistros]=\"totalRegistros\"\r\n              [multFPP]=\"multFPP\"\r\n              [actualPage]=\"actualPage\"\r\n              (onNext)=\"onNext()\"\r\n              (onReturn)=\"onReturn()\"\r\n            ></nexti-lib-table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <ng-template #oneTable>\r\n      <div class=\"content-onebody\">\r\n        <nexti-lib-table\r\n          [title]=\"title\"\r\n          [titleEmpty]=\"titleEmpty\"\r\n          [header]=\"header\"\r\n          [data$]=\"data$\"\r\n          [footerConfig]=\"footerConfig\"\r\n          [recursos]=\"recursos\"\r\n          [actionState]=\"actionState\"\r\n          (onDelete)=\"onDeleteItem($event)\"\r\n          (onUpdate)=\"onUpdateItem($event)\"\r\n          (onActive)=\"onActiveItem($event)\"\r\n          (onShow)=\"onShowItem($event)\"\r\n          (onShowEvent)=\"onShowItemEvent($event)\"\r\n          [opOcultarFooter]=\"opOcultarFooter\"\r\n          [hiddenActions]=\"hiddenActions\"\r\n          [isLoading]=\"isLoading\"\r\n          [paginacion]=\"paginacion\"\r\n          [totalRegistros]=\"totalRegistros\"\r\n          [actualPage]=\"actualPage\"\r\n          [multFPP]=\"multFPP\"\r\n          (onNext)=\"onNext($event)\"\r\n          (onReturn)=\"onReturn($event)\"\r\n        ></nexti-lib-table>\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n",
                styles: ["@import \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\";.header-title{display:flex;flex-direction:row}.tab-content{grid-area:tab-content;overflow:hidden}.tab-pane{height:100%}.breadcrumbs{margin:0;padding:0;font-size:12px;line-height:15px;color:#0f1b32}.breadcrumbs span{color:#b0b0b0}.mh-150{min-width:150px}.datos{padding-top:5px}.datos .nombre-banco{font-weight:700;font-size:16px;line-height:20px}.datos .informacion,.datos .nombre-banco{font-style:normal;display:flex;align-items:center;color:#0f1b32}.datos .informacion{font-weight:400;font-size:12px;line-height:15px}.custom-input-group{width:230px}.custom-input-search{border-right:none}.custom-input-search:focus{box-shadow:none;border-color:#ced4da}.custom-gruop-text{background:transparent}.primary{color:#0f1b32}.secondary{color:#2a8bf2}.muted{color:#585858}.mh-100{height:100%!important;max-height:100%!important}.title-primary{font-size:28px!important}.title-primary,h6{font-weight:700!important;color:#0f1b32}.btn.dropdown-toggle{display:block}a.dropdown-item{cursor:pointer}.text-size-sm{font-size:12px}.content{display:grid;width:100%;height:100%;grid-template-rows:auto 1fr;grid-template-areas:\"content-header\" \"content-body\"}.content-header{grid-area:content-header;padding:1rem 0}.content-body{grid-area:content-body;overflow:hidden;display:grid;width:100%;height:100%;grid-template-rows:auto 1fr;grid-template-areas:\"nav-content\" \"tab-content\"}.content-onebody{grid-area:content-body;overflow:hidden}.nav-content{grid-area:nav-content}.text-small{font-size:1.25rem!important}.page-container{position:relative}.page-container .spinner-container{position:absolute;z-index:100;left:50%;top:1vw}.page-container .spinner-container .spinner-size{width:3rem;height:3rem}"]
            },] }
];
NextiLibDatatableComponent.ctorParameters = () => [
    { type: DatePipe },
    { type: CurrencyPipe },
    { type: ExcelService }
];
NextiLibDatatableComponent.propDecorators = {
    header: [{ type: Input }],
    customHeader: [{ type: Input }],
    list: [{ type: Input }],
    titleEmpty: [{ type: Input }],
    title: [{ type: Input }],
    titleXs: [{ type: Input }],
    btnModal: [{ type: Input }],
    recursos: [{ type: Input }],
    selectFilter: [{ type: Input }],
    hiddenActions: [{ type: Input }],
    breadcrumbs: [{ type: Input }],
    infoAdicional: [{ type: Input }],
    linkBack: [{ type: Input }],
    reportConfig: [{ type: Input }],
    opOcultarBuscar: [{ type: Input }],
    opOcultarFooter: [{ type: Input }],
    footerConfig: [{ type: Input }],
    actionState: [{ type: Input }],
    paginacion: [{ type: Input }],
    totalRegistros: [{ type: Input }],
    multFPP: [{ type: Input }],
    actualPage: [{ type: Input }],
    excelData: [{ type: Input }],
    multiTable: [{ type: Input }],
    sections: [{ type: Input }],
    isLoading: [{ type: Input }],
    onDelete: [{ type: Output }],
    onUpdate: [{ type: Output }],
    onActive: [{ type: Output }],
    onShow: [{ type: Output }],
    onShowEvent: [{ type: Output }],
    onBack: [{ type: Output }],
    onfilter: [{ type: Output }],
    onNext: [{ type: Output }],
    onReturn: [{ type: Output }],
    inputSearch: [{ type: ViewChild, args: ['search',] }],
    datatable: [{ type: ViewChildren, args: [TableComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,