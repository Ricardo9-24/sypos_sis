import { DatePipe, CurrencyPipe, CommonModule } from '@angular/common';
import { ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Component, Input, Output, ViewChild, ViewChildren, NgModule } from '@angular/core';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { Angular2Txt } from 'angular2-txt/Angular2-txt';
import { saveAs } from 'file-saver';
import { utils, write } from 'xlsx';
import { FormsModule } from '@angular/forms';
import { NgSelectModule } from '@ng-select/ng-select';

const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';
class ExcelService {
    constructor(datePipe, currencyPipe) {
        this.datePipe = datePipe;
        this.currencyPipe = currencyPipe;
    }
    exportAsExcelFile(data, excelFileName) {
        const formatData = this.formatData(data);
        const ws = utils.aoa_to_sheet(formatData);
        const wscols = [
            { wch: 1 },
            { wch: 1 },
            { wch: 35 },
            { wch: 15 },
            { wch: 15 },
            { wch: 10 },
            { wch: 16 },
            { wch: 15 },
            { wch: 20 },
            { wch: 20 },
        ];
        ws['!cols'] = wscols;
        const wb = {
            Sheets: { data: ws },
            SheetNames: ['data'],
        };
        const excelBuffer = write(wb, {
            bookType: 'xlsx',
            type: 'array',
        });
        this.saveAsExcelFile(excelBuffer, excelFileName);
    }
    saveAsExcelFile(buffer, fileName) {
        const data = new Blob([buffer], { type: EXCEL_TYPE });
        saveAs(data, fileName + '_' + new Date().getTime() + EXCEL_EXTENSION);
    }
    getTableRow(array, param, whiteSpace) {
        let rowsCobradas = [];
        const commonDateForStr = 'dd/MM/yyyy';
        array.forEach((f) => {
            if (f.data.length) {
                f.data.forEach((e, i) => {
                    const fechaEmi = this.datePipe.transform(e.FechaEmision, commonDateForStr);
                    const valorFact = this.currencyPipe.transform(e.importeTotal);
                    const fechaEmiRet = this.datePipe.transform(e.FechaEmisionRet, commonDateForStr);
                    const valorRet = this.currencyPipe.transform(e.importeTotalRet);
                    const valorTotal = this.currencyPipe.transform(e[param]);
                    let actualDataRow = [
                        e.Numdoc,
                        fechaEmi,
                        valorFact,
                        e.NumdocRet,
                        fechaEmiRet,
                        valorRet,
                        valorTotal,
                    ];
                    if (i == 0) {
                        rowsCobradas.push([...whiteSpace, f.rucEmpresa, ...actualDataRow]);
                        if (f.data.length == 1) {
                            rowsCobradas.push([...whiteSpace, f.razonSocial]);
                        }
                    }
                    else if (i == 1) {
                        rowsCobradas.push([...whiteSpace, f.razonSocial, ...actualDataRow]);
                    }
                    else {
                        rowsCobradas.push([...whiteSpace, '', ...actualDataRow]);
                    }
                });
            }
            const totalFact = this.currencyPipe.transform(f.totalFact);
            const totalRet = this.currencyPipe.transform(f.totalRet);
            const totalPagado = this.currencyPipe.transform(f.totalPagado);
            // subtotal
            rowsCobradas.push([
                ...whiteSpace,
                '',
                f.cantFact,
                '',
                totalFact,
                f.cantRet,
                '',
                totalRet,
                totalPagado,
            ]);
        });
        return rowsCobradas;
    }
    formatData(data) {
        const whiteSpace = ['', ''];
        const tableHeader = [
            ...whiteSpace,
            'RUC / RAZON SOCIAL',
            'Número Factura',
            'Fecha Factura',
            'Valor Factura',
            'Número Retención',
            'Fecha Retención',
            'Valor Retención',
            'Valor Total Pagado',
        ];
        const facturasCobradas = data.cobradas;
        const facturasPagadas = data.pagadas;
        const rowsCobradas = this.getTableRow(facturasCobradas, 'totalCobrado', whiteSpace);
        const rowsPagadas = this.getTableRow(facturasPagadas, 'totalPagado', whiteSpace);
        const rowTotalCobradas = [
            ...whiteSpace,
            'TOTAL FACTURAS COBRADAS',
            data.cantCobradas,
            '',
            this.currencyPipe.transform(data.sumCobradas),
            data.cantRetCobradas,
            '',
            this.currencyPipe.transform(data.sumRetCobradas),
            this.currencyPipe.transform(data.totalCobradas),
        ];
        const rowTotalPagadas = [
            ...whiteSpace,
            'TOTAL FACTURAS PAGADAS',
            data.cantPagadas,
            '',
            this.currencyPipe.transform(data.sumPagadas),
            data.cantRetPagadas,
            '',
            this.currencyPipe.transform(data.sumRetPagadas),
            this.currencyPipe.transform(data.totalPagadas),
        ];
        const netoTotalFor = this.currencyPipe.transform(data.netoTotal);
        const rowNetos = [
            ...whiteSpace,
            'VALORES NETOS',
            '',
            '',
            this.currencyPipe.transform(data.netoFact),
            '',
            '',
            this.currencyPipe.transform(data.netoRet),
            netoTotalFor,
        ];
        const rowPosicionNeta = [
            ...whiteSpace,
            'POSICION NETA DE LA EMPRESA',
            netoTotalFor,
        ];
        const actualFormatDate = this.datePipe.transform(Date.now(), 'dd/MM/YYYY HH:mm:ss');
        return [
            [],
            [],
            // prettier-ignore
            [...whiteSpace, 'SESIÓN DE COMPENSACIÓN DEFINITIVA', '', '', '', '', '', '', actualFormatDate],
            [...whiteSpace, 'REPORTE POR EMPRESA PARTICIPANTE'],
            [],
            // prettier-ignore
            [...whiteSpace, 'EMPRESA :', data.Ruc, data.razonSocial, '', '', '', 'FECHA COMPENSACIÓN', data.fechaSesion],
            [],
            [...whiteSpace, 'FACTURAS COBRADAS'],
            tableHeader,
            ...rowsCobradas,
            rowTotalCobradas,
            [],
            [],
            [...whiteSpace, 'FACTURAS PAGADAS'],
            tableHeader,
            ...rowsPagadas,
            rowTotalPagadas,
            [],
            [...whiteSpace, 'RESUMEN PROCESO DE COMPENSACIÓN'],
            // prettier-ignore
            [...whiteSpace, '', 'Número Facturas', '', 'Valor Facturas', 'Número Retenciones', '', 'Valor Retenciones', 'Valor Total'],
            [],
            rowTotalCobradas,
            rowTotalPagadas,
            rowNetos,
            [],
            rowPosicionNeta,
        ];
    }
}
ExcelService.ɵprov = ɵɵdefineInjectable({ factory: function ExcelService_Factory() { return new ExcelService(ɵɵinject(DatePipe), ɵɵinject(CurrencyPipe)); }, token: ExcelService, providedIn: "root" });
ExcelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ExcelService.ctorParameters = () => [
    { type: DatePipe },
    { type: CurrencyPipe }
];

var NumberFormat;
(function (NumberFormat) {
    NumberFormat["NUM"] = "number";
    NumberFormat["CUR"] = "currency";
})(NumberFormat || (NumberFormat = {}));
var FormatType;
(function (FormatType) {
    FormatType["NUM"] = "number";
    FormatType["CUR"] = "currency";
    FormatType["COU"] = "count";
})(FormatType || (FormatType = {}));
var OperationFormat;
(function (OperationFormat) {
    OperationFormat["SUM"] = "suma";
    OperationFormat["RES"] = "resta";
})(OperationFormat || (OperationFormat = {}));
class TableComponent {
    constructor(currencyPipe) {
        this.currencyPipe = currencyPipe;
        this.paginacion = false;
        this.totalRegistros = 0;
        this.actualPage = 0;
        this.multFPP = 0;
        this.onNext = new EventEmitter();
        this.onReturn = new EventEmitter();
        this.onDelete = new EventEmitter();
        this.onUpdate = new EventEmitter();
        this.onActive = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onShowEvent = new EventEmitter();
        this.footerRow = [];
        this.dataPerm$ = new Array();
        this.observableBtnDelete$ = false;
        this.observableBtnUpdate$ = false;
        this.observableBtnActive = false;
        this.filas = [];
        this.filasPorPagina = 0;
    }
    ngOnChanges(changes) {
        const { data$, recursos } = changes;
        if ((data$ === null || data$ === void 0 ? void 0 : data$.currentValue) !== (data$ === null || data$ === void 0 ? void 0 : data$.previousValue)) {
            this.dataPerm$ = data$ === null || data$ === void 0 ? void 0 : data$.currentValue;
        }
        if ((recursos === null || recursos === void 0 ? void 0 : recursos.currentValue) !== (recursos === null || recursos === void 0 ? void 0 : recursos.previousValue)) {
            this.observableBtnUpdate$ = this.recursos.update;
            this.observableBtnDelete$ = this.recursos.delete;
            this.observableBtnActive = this.recursos.active;
        }
    }
    ngOnInit() {
        this.orderHeaderStatus = this.header.map((h) => false);
        if (this.paginacion && this.multFPP != 0) {
            this.calcFilasPorPagina();
        }
        else if (this.paginacion && this.multFPP === 0) {
            this.filasPorPagina = 10;
            this.filas.push(10);
        }
    }
    calcFilasPorPagina() {
        let cantidadFilas = 0;
        for (let index = 0; index < 10; index++) {
            cantidadFilas = cantidadFilas + this.multFPP;
            this.filas.push(cantidadFilas);
        }
        this.filasPorPagina = this.filas[0];
    }
    paginaSiguiente() {
        this.onNext.emit(this.filasPorPagina);
    }
    paginaAnterior() {
        this.onReturn.emit(this.filasPorPagina);
    }
    onOrderColumn(head, index) {
        const orderStatus = this.orderHeaderStatus[index];
        this.orderHeaderStatus[index] = !orderStatus;
        this.data$ = this.dataPerm$.sort((_, b) => {
            if (typeof _[index] === 'object') {
                if (_[index].title) {
                    if (_[index].title > b[index].title) {
                        return orderStatus ? 1 : -1;
                    }
                    if (_[index].title < b[index].title) {
                        return orderStatus ? -1 : 1;
                    }
                    return 0;
                }
                if (b[index].subtitle) {
                    if (_[index].subtitle > b[index].subtitle) {
                        return orderStatus ? 1 : -1;
                    }
                    if (_[index].subtitle < b[index].subtitle) {
                        return orderStatus ? -1 : 1;
                    }
                    return 0;
                }
            }
            else {
                if (_[index] > b[index]) {
                    return orderStatus ? 1 : -1;
                }
                if (_[index] < b[index]) {
                    return orderStatus ? -1 : 1;
                }
                return 0;
            }
        });
    }
    getFooterData() {
        var _a;
        const { customTotalTitle, customTotalRows, customTotalFormatting, customTotalType, customTotalAlign, customTotalFixed, customOperationFormatting, } = this.footerConfig;
        let tableFooterData = [];
        let rawData = [];
        (_a = this.data$) === null || _a === void 0 ? void 0 : _a.forEach((itemArray) => {
            let rawDataRow = [];
            // Step 1: format - prepare dat
            const formatedData = itemArray.map((item) => this.getFormatDataToTreatment(item));
            // Step 2: Get raw data (values to totals)
            this.getRawData(customTotalRows, formatedData, customTotalType, rawDataRow);
            rawData.push(rawDataRow);
        });
        if (customTotalRows && customTotalRows.length && rawData.length) {
            let procesedTotals = [];
            switch (customOperationFormatting) {
                case OperationFormat.RES:
                    procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => {
                        return itemArray.reduce((a, b) => a - b);
                    });
                    break;
                default:
                    procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => itemArray.reduce((a, b) => a + b, 0));
                    break;
            }
            if (customTotalFormatting && customTotalFormatting.length) {
                procesedTotals = customTotalFormatting.map((format, index) => {
                    let value, align, fixed, less;
                    switch (format) {
                        case NumberFormat.CUR:
                            value = this.currencyPipe.transform(procesedTotals[index]);
                            break;
                        default:
                            value = procesedTotals[index];
                            break;
                    }
                    align = customTotalAlign[index];
                    fixed = customTotalFixed[index];
                    less = procesedTotals[index] <= -1;
                    return {
                        value,
                        align,
                        fixed,
                        less,
                    };
                });
            }
            tableFooterData = procesedTotals.length ? procesedTotals : null;
        }
        let finalFooterData = [];
        // Clear data
        if (customTotalRows && customTotalRows.length) {
            let cont = 0;
            for (let i = 0; i < this.header.length; i++) {
                let itemToPush;
                customTotalRows.forEach((customIndex) => {
                    if (customIndex === i) {
                        itemToPush = tableFooterData[cont];
                        cont++;
                    }
                });
                if (i === 0 && customTotalTitle) {
                    itemToPush = {
                        fixed: 'td-sticky-left title-total',
                        value: customTotalTitle,
                    };
                }
                if (this.header.length === i + 1 && !this.hiddenActions) {
                    itemToPush = { fixed: 'td-sticky-right' };
                }
                finalFooterData.push(itemToPush);
            }
        }
        this.footerRow = finalFooterData;
    }
    formatCurrencyToNumber(value) {
        if (value !== undefined && value !== null)
            return Number(String(value).replace(/[^0-9.-]+/g, ''));
    }
    trasposeMatrix(matrix) {
        return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));
    }
    toggleFilterClass(index) {
        return `bi ${this.orderHeaderStatus[index] ? 'bi-caret-up-fill' : 'bi-caret-down-fill'} icon-order`;
    }
    isObject(val) {
        return typeof val === 'object';
    }
    getRawData(customTotalRows, formatedData, customTotalType, rawDataRow) {
        if (customTotalRows && customTotalRows.length) {
            customTotalRows.forEach((customIndex, indexCol) => {
                formatedData.forEach((item, index) => {
                    if (customIndex === index) {
                        let returnItem = 0;
                        customTotalType.forEach((type, indexType) => {
                            if (indexCol === indexType) {
                                switch (type) {
                                    case FormatType.NUM:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = Number(item);
                                        }
                                        break;
                                    case FormatType.CUR:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = this.formatCurrencyToNumber(item);
                                        }
                                        break;
                                    case FormatType.COU:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = 1;
                                        }
                                        break;
                                    default:
                                        returnItem = 0;
                                }
                            }
                        });
                        rawDataRow.push(returnItem);
                    }
                });
            });
        }
    }
    getFormatDataToTreatment(item) {
        if (typeof item === 'object') {
            if (item != null) {
                if (item.title && item.subtitle) {
                    return `${item.title}\n${item.subtitle}`;
                }
                else {
                    return item.title ? item.title : item.subtitle && item.subtitle;
                }
            }
            else {
                return '';
            }
        }
        else {
            return item;
        }
    }
    onDeleteItem(item) {
        this.onDelete.emit(item);
    }
    onActiveItem(item) {
        this.onActive.emit(item);
    }
    onUpdateItem(item) {
        this.onUpdate.emit(item);
    }
    onShowItem(item, $event) {
        this.onShow.emit(item);
        this.onShowEvent.emit($event);
    }
}
TableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nexti-lib-table',
                template: "<div class=\"content-table\">\r\n  <div class=\"content-body table-responsive\">\r\n    <table [attr.aria-label]=\"title\" aria class=\"table\" id=\"table\">\r\n      <thead class=\"table-head\">\r\n        <tr>\r\n          <ng-container *ngFor=\"let head of header; index as i\">\r\n            <ng-container *ngIf=\"isObject(head); else thsimple\">\r\n              <ng-container *ngIf=\"head?.fixedLeft === true\">\r\n                <th\r\n                  scope=\"col\"\r\n                  [ngClass]=\"{\r\n                    'th-sticky-left': true,\r\n                    alignEnd: head?.alignEnd\r\n                  }\"\r\n                >\r\n                  <div class=\"thflex\">\r\n                    <span>{{ head.title }}</span>\r\n                    <ng-container *ngIf=\"head?.order === true\">\r\n                      <i\r\n                        aria-hidden=\"true\"\r\n                        [class]=\"toggleFilterClass(i)\"\r\n                        (click)=\"onOrderColumn(head, i)\"\r\n                      ></i>\r\n                    </ng-container>\r\n                  </div>\r\n                </th>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"head?.fixedRight === true\">\r\n                <th\r\n                  scope=\"col\"\r\n                  [ngClass]=\"{\r\n                    'th-sticky-right': true,\r\n                    alignEnd: head?.alignEnd\r\n                  }\"\r\n                >\r\n                  <div class=\"thflex\">\r\n                    <span>{{ head.title }}</span>\r\n                    <ng-container *ngIf=\"head?.order === true\">\r\n                      <i\r\n                        aria-hidden=\"true\"\r\n                        [class]=\"toggleFilterClass(i)\"\r\n                        (click)=\"onOrderColumn(head, i)\"\r\n                      ></i>\r\n                    </ng-container>\r\n                  </div>\r\n                </th>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!head?.fixedRight && !head?.fixedLeft\">\r\n                <th scope=\"col\">\r\n                  <div\r\n                    class=\"thflex\"\r\n                    [ngClass]=\"{\r\n                      alignEnd: head?.alignEnd\r\n                    }\"\r\n                  >\r\n                    <span>{{ head.title }}</span>\r\n                    <ng-container *ngIf=\"head?.order === true\">\r\n                      <i\r\n                        aria-hidden=\"true\"\r\n                        [class]=\"toggleFilterClass(i)\"\r\n                        (click)=\"onOrderColumn(head, i)\"\r\n                      ></i>\r\n                    </ng-container>\r\n                  </div>\r\n                </th>\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-template #thsimple>\r\n              <th scope=\"col\">\r\n                <span>{{ head }}</span>\r\n              </th>\r\n            </ng-template>\r\n          </ng-container>\r\n        </tr>\r\n      </thead>\r\n      <ng-container *ngIf=\"data$ && data$.length > 0\">\r\n        <tbody class=\"table-body\">\r\n          <tr *ngFor=\"let list of data$\">\r\n            <ng-container *ngFor=\"let item of list\">\r\n              <ng-container *ngIf=\"!item?.hidden\">\r\n                <ng-container *ngIf=\"isObject(item); else tdsimple\">\r\n                  <ng-container\r\n                    *ngIf=\"item?.fixedLeft || item?.fixedRight; else tdsimple\"\r\n                  >\r\n                    <ng-container\r\n                      *ngIf=\"item?.fixedLeft === true; else tdfixedright\"\r\n                    >\r\n                      <td\r\n                        [ngClass]=\"{\r\n                          'td-sticky-left': true,\r\n                          alignEnd: item?.alignEnd ? true : false\r\n                        }\"\r\n                      >\r\n                        <ng-container *ngIf=\"item?.title\">\r\n                          <a\r\n                            href=\"#\"\r\n                            *ngIf=\"item.link\"\r\n                            (click)=\"onShowItem(item, $event)\"\r\n                            data-bs-toggle=\"modal\"\r\n                            data-bs-target=\"#exampleModal\"\r\n                            [attr.data-id]=\"item?.title\"\r\n                            >{{ item?.title }}</a\r\n                          >\r\n                          <span\r\n                            [ngClass]=\"{\r\n                              title: item.link,\r\n                              warn: formatCurrencyToNumber(item?.title) <= -1\r\n                            }\"\r\n                            *ngIf=\"!item?.link\"\r\n                            >{{ item?.title }}</span\r\n                          >\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"item?.title && item?.subtitle\">\r\n                          <br />\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"item?.subtitle\">\r\n                          <span\r\n                            class=\"subtitle\"\r\n                            [ngClass]=\"{\r\n                              warn: formatCurrencyToNumber(item?.subtitle) <= -1\r\n                            }\"\r\n                            >{{ item?.subtitle }}</span\r\n                          >\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n                    <ng-template #tdfixedright>\r\n                      <td\r\n                        [ngClass]=\"{\r\n                          'td-sticky-right': true,\r\n                          alignEnd: item?.alignEnd ? true : false\r\n                        }\"\r\n                      >\r\n                        <ng-container *ngIf=\"item?.title\">\r\n                          <a\r\n                            href=\"#\"\r\n                            *ngIf=\"item.link\"\r\n                            (click)=\"onShowItem(item, $event)\"\r\n                            data-bs-toggle=\"modal\"\r\n                            data-bs-target=\"#exampleModal\"\r\n                            [attr.data-id]=\"item?.title\"\r\n                            >{{ item?.title }}</a\r\n                          >\r\n                          <span\r\n                            [ngClass]=\"{\r\n                              title: item.link,\r\n                              warn: formatCurrencyToNumber(item?.title) <= -1\r\n                            }\"\r\n                            *ngIf=\"!item?.link\"\r\n                            >{{ item?.title }}</span\r\n                          >\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"item?.title && item?.subtitle\">\r\n                          <br />\r\n                        </ng-container>\r\n                        <ng-container *ngIf=\"item?.subtitle\">\r\n                          <span\r\n                            class=\"subtitle\"\r\n                            [ngClass]=\"{\r\n                              warn: formatCurrencyToNumber(item?.subtitle) <= -1\r\n                            }\"\r\n                            >{{ item?.subtitle }}</span\r\n                          >\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-template>\r\n                  </ng-container>\r\n                  <ng-template #tdsimple>\r\n                    <td\r\n                      [ngClass]=\"{\r\n                        alignEnd: item?.alignEnd ? true : false\r\n                      }\"\r\n                    >\r\n                      <a\r\n                        href=\"#\"\r\n                        *ngIf=\"item?.link\"\r\n                        (click)=\"onShowItem(item, $event)\"\r\n                        data-bs-toggle=\"modal\"\r\n                        data-bs-target=\"#exampleModal\"\r\n                        [attr.data-id]=\"item?.title\"\r\n                        >{{ item?.title }}</a\r\n                      >\r\n                      <span\r\n                        [ngClass]=\"{\r\n                          title: item.link,\r\n                          warn: formatCurrencyToNumber(item?.title) <= -1\r\n                        }\"\r\n                        *ngIf=\"!item?.link\"\r\n                        >{{ item?.title }}</span\r\n                      >\r\n                      <br /><span\r\n                        class=\"subtitle\"\r\n                        [ngClass]=\"{\r\n                          warn: formatCurrencyToNumber(item?.subtitle) <= -1\r\n                        }\"\r\n                        >{{ item?.subtitle }}</span\r\n                      >\r\n                    </td>\r\n                  </ng-template>\r\n                </ng-container>\r\n                <ng-template #tdsimple>\r\n                  <td\r\n                    [ngClass]=\"{\r\n                      warn: formatCurrencyToNumber(item) <= -1\r\n                    }\"\r\n                  >\r\n                    {{ item }}\r\n                  </td>\r\n                </ng-template>\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!hiddenActions\">\r\n              <td class=\"td-sticky-right\">\r\n                <ng-container *ngIf=\"observableBtnUpdate$ && !actionState\">\r\n                  <a\r\n                    class=\"icon-actions\"\r\n                    (click)=\"onUpdateItem(list)\"\r\n                    data-bs-toggle=\"modal\"\r\n                    data-bs-target=\"#exampleModal\"\r\n                    ><i\r\n                      aria-hidden=\"true\"\r\n                      class=\"bi bi-pencil-square secondary\"\r\n                    ></i\r\n                  ></a>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"observableBtnDelete$ && !actionState\">\r\n                  <a class=\"icon-actions\" (click)=\"onDeleteItem(list)\"\r\n                    ><i aria-hidden=\"true\" class=\"bi bi-trash primary\"></i\r\n                  ></a>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"observableBtnActive && actionState\">\r\n                  <button\r\n                    (click)=\"onActiveItem(list)\"\r\n                    type=\"button\"\r\n                    class=\"btn btn-primary\"\r\n                  >\r\n                    Activar\r\n                  </button>\r\n                </ng-container>\r\n              </td>\r\n            </ng-container>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot *ngIf=\"footerConfig\">\r\n          <tr>\r\n            <ng-container *ngFor=\"let item of footerRow\">\r\n              <td\r\n                [classList]=\"item?.fixed\"\r\n                [ngClass]=\"{ warn: item?.less }\"\r\n                [style]=\"item?.align\"\r\n              >\r\n                {{ item?.value }}\r\n              </td>\r\n            </ng-container>\r\n          </tr>\r\n        </tfoot>\r\n      </ng-container>\r\n    </table>\r\n    <div class=\"emptyContent\" *ngIf=\"!data$ || data$.length === 0\">\r\n      <ng-container *ngIf=\"!isLoading\">\r\n        <img class=\"icon-empty\" src=\"./assets/icons/empty.svg\" alt=\"empty\" />\r\n        <h6>{{ titleEmpty }}</h6>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"content-footer d-flex justify-content-end pt-3\"\r\n    *ngIf=\"!opOcultarFooter\"\r\n  >\r\n    <ng-container *ngIf=\"data$?.length !== undefined\">\r\n      <ng-container *ngIf=\"paginacion; else comunfooter\">\r\n        <div class=\"d-flex w-50 justify-content-end align-items-start\">\r\n          <div class=\"d-flex flex-row align-items-center\">\r\n            <h6 class=\"text-size-sm muted mx-2 mb-0\">Filas por p\u00E1gina:</h6>\r\n            <select\r\n              class=\"form-select custom-select\"\r\n              [(ngModel)]=\"filasPorPagina\"\r\n            >\r\n              <option *ngFor=\"let item of filas\" value=\"{{ item }}\">\r\n                {{ item }}\r\n              </option>\r\n            </select>\r\n            <h6 class=\"text-size-sm muted mx-2 mb-0 text-end\">\r\n              {{\r\n                data$.length ? data$.length * actualPage - data$.length + 1 : 0\r\n              }}\r\n              - {{ actualPage * data$?.length }} de\r\n              {{ totalRegistros }}\r\n            </h6>\r\n            <div class=\"\">\r\n              <i\r\n                class=\"bi bi-chevron-left mx-2 custom-chevron\"\r\n                aria-hidden=\"true\"\r\n                (click)=\"paginaAnterior()\"\r\n              ></i>\r\n              <i\r\n                class=\"bi bi-chevron-right custom-chevron\"\r\n                aria-hidden=\"true\"\r\n                (click)=\"paginaSiguiente()\"\r\n              ></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n      <ng-template #comunfooter>\r\n        <h6 class=\"text-size-sm muted\">\r\n          Mostrando {{ data$?.length }} registros\r\n        </h6>\r\n      </ng-template>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n",
                styles: ["@import \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\";tfoot{position:sticky;bottom:0;z-index:2}tfoot td{border-collapse:initial;border-top:2px solid #0f1b32!important}.thflex{display:flex;flex-direction:row;align-items:center;justify-content:space-between}.alignEnd{justify-content:flex-end;text-align:end}.table-responsive{width:100%;overflow:auto}.table{width:100%;border-spacing:0}.table,.table-head{border-collapse:initial}.table-head{position:sticky;top:0;z-index:2}.table-head th{border-bottom:2px solid #0f1b32!important}.table-body,.table-body td,.table-head th{border-collapse:initial}.table-body td{border-bottom:1px solid #e4e9ef!important}.primary{color:#0f1b32}.secondary{color:#2a8bf2}.icon-order{cursor:pointer;padding-left:10px}th{font-weight:700;color:#0f1b32;vertical-align:middle}td,th{font-size:12px;line-height:17px;width:auto;height:50px;min-width:150px;max-width:200px;background-color:#fff}td{font-weight:500;color:#585858}.title{color:#2a8bf2}.title-total{font-weight:700}.subtitle{text-transform:uppercase}.icon-actions{font-size:15px;cursor:pointer;color:#585858}.icon-actions:nth-child(2){margin-left:15px}.text-size-sm{font-size:12px;min-width:100px}.th-sticky-left{position:sticky;left:0;z-index:3}.th-sticky-right{position:sticky;right:0;z-index:3}.td-sticky-left{position:sticky;left:0;z-index:1}.td-sticky-right{position:sticky;right:0;z-index:1}.emptyContent{position:sticky;left:0;right:0;width:100%;min-height:200px;display:flex;flex-direction:column;justify-content:center;align-items:center}h6{color:#0f1b32;font-weight:700!important}.icon-empty{font-size:75px}.warn{color:#eb5757!important}.content-table{display:grid;width:100%;height:100%;grid-template-rows:auto 1fr;grid-template-areas:\"content-body\" \"content-footer\"}.content-body{grid-area:content-body}.content-footer{grid-area:content-footer}.custom-select{padding:5px;width:60px;max-width:60px;min-width:60px}.custom-chevron{cursor:pointer}"]
            },] }
];
TableComponent.ctorParameters = () => [
    { type: CurrencyPipe }
];
TableComponent.propDecorators = {
    title: [{ type: Input }],
    titleEmpty: [{ type: Input }],
    header: [{ type: Input }],
    data$: [{ type: Input }],
    footerConfig: [{ type: Input }],
    recursos: [{ type: Input }],
    actionState: [{ type: Input }],
    opOcultarFooter: [{ type: Input }],
    hiddenActions: [{ type: Input }],
    isLoading: [{ type: Input }],
    paginacion: [{ type: Input }],
    totalRegistros: [{ type: Input }],
    actualPage: [{ type: Input }],
    multFPP: [{ type: Input }],
    onNext: [{ type: Output }],
    onReturn: [{ type: Output }],
    onDelete: [{ type: Output }],
    onUpdate: [{ type: Output }],
    onActive: [{ type: Output }],
    onShow: [{ type: Output }],
    onShowEvent: [{ type: Output }]
};

var NumberFormat$1;
(function (NumberFormat) {
    NumberFormat["NUM"] = "number";
    NumberFormat["CUR"] = "currency";
})(NumberFormat$1 || (NumberFormat$1 = {}));
var AlignClass;
(function (AlignClass) {
    AlignClass["LEFT"] = "text-align: start;";
    AlignClass["RIGHT"] = "text-align: end;";
})(AlignClass || (AlignClass = {}));
var FormatType$1;
(function (FormatType) {
    FormatType["NUM"] = "number";
    FormatType["CUR"] = "currency";
    FormatType["DIF"] = "difference";
    FormatType["COU"] = "count";
})(FormatType$1 || (FormatType$1 = {}));
class NextiLibDatatableComponent {
    constructor(datePipe, currencyPipe, excelService) {
        this.datePipe = datePipe;
        this.currencyPipe = currencyPipe;
        this.excelService = excelService;
        this.titleXs = false;
        this.linkBack = false;
        this.actionState = false;
        this.paginacion = false;
        this.totalRegistros = 0;
        this.multFPP = 0;
        this.actualPage = 0;
        this.multiTable = false;
        this.sections = false;
        this.onDelete = new EventEmitter();
        this.onUpdate = new EventEmitter();
        this.onActive = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onShowEvent = new EventEmitter();
        this.onBack = new EventEmitter();
        this.onfilter = new EventEmitter();
        this.onNext = new EventEmitter();
        this.onReturn = new EventEmitter();
        this.data$ = new Array();
        // TODO mejorar, con un estado de header normalizado se puede prescindir de esta variable
        this.dataPerm$ = new Array();
        this.footerRow = [];
        this.filterSelected = null;
    }
    ngOnInit() {
        var _a;
        (_a = this.selectFilter) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
            if (element.selected) {
                this.filterSelected = element.value;
            }
        });
    }
    ngOnChanges(changes) {
        const { list } = changes;
        if ((list === null || list === void 0 ? void 0 : list.currentValue) !== (list === null || list === void 0 ? void 0 : list.previousValue)) {
            this.data$ = list === null || list === void 0 ? void 0 : list.currentValue;
            this.dataPerm$ = list === null || list === void 0 ? void 0 : list.currentValue;
            if (this.inputSearch)
                this.inputSearch.nativeElement.value = '';
        }
    }
    ngDoCheck() {
        var _a;
        (_a = this.datatable) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
            if (this.footerConfig)
                element.getFooterData();
        });
    }
    onFilter() {
        this.onfilter.emit(this.filterSelected);
    }
    onDeleteItem(item) {
        this.onDelete.emit(item);
    }
    onUpdateItem(item) {
        this.onUpdate.emit(item);
    }
    onActiveItem(item) {
        this.onActive.emit(item);
    }
    onShowItem(item) {
        this.onShow.emit(item);
    }
    onShowItemEvent($event) {
        this.onShowEvent.emit($event);
    }
    onlyNumbers(event) {
        return event.charCode >= 48 && event.charCode <= 57;
    }
    customSearchBancoFn(term, item) {
        term = term.toLowerCase();
        return item.bancorresponsal.toLowerCase().includes(term);
    }
    customSearchCompaniesFn(term, item) {
        term = term.toLowerCase();
        return (item.ruc.includes(term) || item.razonSocial.toLowerCase().includes(term));
    }
    filter(search) {
        if (this.multiTable) {
            let datafilter = [];
            for (const list of this.dataPerm$) {
                let data = this.filterList(list, search);
                datafilter.push(data);
            }
            this.data$ = datafilter;
        }
        else {
            this.data$ = this.filterList(this.dataPerm$, search);
        }
    }
    filterList(list, search) {
        return list.filter((lista) => {
            for (const row of lista) {
                if (typeof row === 'object') {
                    if ((row.title && this.toCompareString(row.title, search)) ||
                        (row.subtitle && this.toCompareString(row.subtitle, search))) {
                        return lista;
                    }
                }
                else if (this.toCompareString(row, search)) {
                    return lista;
                }
            }
        });
    }
    toCompareString(item, search) {
        return item
            .toString()
            .toUpperCase()
            .includes(search.toString().toUpperCase());
    }
    getReportHeader() {
        const { customHeader } = this.reportConfig;
        return customHeader
            ? customHeader
            : this.header.map((item) => {
                if (typeof item === 'object') {
                    return item.title;
                }
                else {
                    return item;
                }
            });
    }
    getFormatDataToTreatment(item) {
        if (typeof item === 'object') {
            if (item != null) {
                if (item.title && item.subtitle) {
                    return `${item.title}\n${item.subtitle}`;
                }
                else {
                    return item.title ? item.title : item.subtitle && item.subtitle;
                }
            }
            else {
                return '';
            }
        }
        else {
            return item;
        }
    }
    getRawData(customTotalRows, formatedData, customTotalType, rawDataRow) {
        if (customTotalRows && customTotalRows.length) {
            customTotalRows.forEach((customIndex, indexCol) => {
                formatedData.forEach((item, index) => {
                    if (customIndex === index) {
                        let returnItem = 0;
                        customTotalType.forEach((type, indexType) => {
                            if (indexCol === indexType) {
                                switch (type) {
                                    case FormatType$1.NUM:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = Number(item);
                                        }
                                        break;
                                    case FormatType$1.CUR:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = this.formatCurrencyToNumber(item);
                                        }
                                        break;
                                    case FormatType$1.COU:
                                        if ((typeof item === 'string' &&
                                            (item == '--' || item === '')) ||
                                            typeof item === 'undefined') {
                                            returnItem = 0;
                                        }
                                        else {
                                            returnItem = 1;
                                        }
                                        break;
                                    default:
                                        returnItem = 0;
                                }
                            }
                        });
                        rawDataRow.push(returnItem);
                    }
                });
            });
        }
    }
    getReportBody() {
        const { customIndexRows, customTotalRows, customTotalFormatting, customTotalType, footLabel, } = this.reportConfig;
        let tableData = [];
        let tableFooterData = [];
        let rawData = [];
        this.data$.forEach((itemArray) => {
            let tableDataRow = [];
            let rawDataRow = [];
            // Step 1: format - prepare dat
            const formatedData = itemArray.map((item) => this.getFormatDataToTreatment(item));
            // Step 2: Generate Filter data
            if (customIndexRows && customIndexRows.length) {
                customIndexRows.forEach((customIndex) => {
                    formatedData.forEach((item, index) => {
                        if (customIndex === index) {
                            tableDataRow.push(item);
                        }
                    });
                });
            }
            else {
                tableDataRow = formatedData;
            }
            // Step 3: Get raw data (values to totals)
            this.getRawData(customTotalRows, formatedData, customTotalType, rawDataRow);
            tableData.push(tableDataRow);
            rawData.push(rawDataRow);
        });
        if (customTotalRows && customTotalRows.length && rawData.length) {
            let procesedTotals = [];
            procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => itemArray.reduce((a, b) => a + b, 0));
            if (customTotalFormatting && customTotalFormatting.length) {
                procesedTotals = customTotalFormatting.map((format, index) => {
                    switch (format) {
                        case NumberFormat$1.CUR:
                            return this.currencyPipe.transform(procesedTotals[index]);
                        default:
                            return procesedTotals[index];
                    }
                });
            }
            procesedTotals = [[footLabel, ...procesedTotals]];
            tableFooterData = procesedTotals.length ? procesedTotals : null;
        }
        return {
            tableData,
            tableFooterData,
        };
    }
    generatePdf() {
        const pdf = new jsPDF();
        pdf.setProperties({
            title: 'Resultados Netos',
        });
        const { title, subtitle, subject, sessionDate, tableTitle } = this.reportConfig;
        const pageSize = pdf.internal.pageSize;
        const pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();
        // Section I
        pdf.autoTable({
            body: [
                [title, this.datePipe.transform(Date.now(), 'dd/MM/yyyy HH:mm')],
                [
                    {
                        content: subtitle,
                        colSpan: 2,
                        styles: { fontSize: 12, fontStyle: 'normal' },
                    },
                ],
            ],
            showHead: false,
            theme: 'plain',
            styles: {
                fillColor: [48, 84, 150],
                textColor: 255,
                valign: 'bottom',
            },
            columnStyles: {
                0: { fontStyle: 'bold', fontSize: 13 },
                1: { fontSize: 11, halign: 'right' },
            },
        });
        // Section II left
        const lastTableY = pdf.lastAutoTable.finalY + 5;
        pdf.autoTable({
            body: [[subject]],
            showHead: false,
            theme: 'plain',
            startY: lastTableY,
            styles: {
                fillColor: [255, 255, 153],
                textColor: 0,
                valign: 'bottom',
                fontSize: 11,
                fontStyle: 'bold',
                overflow: 'hidden',
            },
            margin: { right: 100 },
        });
        // Section II right
        pdf.autoTable({
            body: [
                [
                    'SESION COMPENSACION:',
                    this.datePipe.transform(sessionDate, 'dd/MM/yy, HH:mm', 'UTC'),
                ],
            ],
            showHead: false,
            theme: 'plain',
            startY: lastTableY,
            styles: {
                fillColor: [255, 255, 153],
                textColor: 0,
                valign: 'bottom',
                fontSize: 10,
                overflow: 'hidden',
            },
            margin: { left: pageWidth - 90 },
            columnStyles: {
                1: { halign: 'right' },
            },
        });
        // Section III
        pdf.autoTable({
            body: [[tableTitle]],
            showHead: false,
            theme: 'plain',
            startY: pdf.lastAutoTable.finalY + 10,
            styles: {
                fillColor: [31, 78, 120],
                textColor: 255,
                valign: 'bottom',
                fontSize: 11,
                fontStyle: 'bold',
            },
        });
        const header = [this.getReportHeader()];
        const { tableData, tableFooterData } = this.getReportBody();
        // Section IV
        const tableRenderObj = {
            head: header,
            body: tableData,
            theme: 'striped',
            showHead: 'firstPage',
            showFoot: 'lastPage',
            startY: pdf.lastAutoTable.finalY,
            headStyles: { fillColor: [214, 220, 228], textColor: 0 },
            footStyles: { fillColor: [31, 78, 120], textColor: 255 },
            foot: tableFooterData.length ? tableFooterData : false,
            styles: { fontSize: 9 },
        };
        pdf.autoTable(tableRenderObj);
        // Open PDF document in browser's new tab
        // pdf.output('pdfobjectnewwindow');
        pdf.save();
    }
    generateTxt() {
        const header = this.getReportHeader();
        const options = {
            headers: header,
            fieldSeparator: ';',
            quoteStrings: '',
            decimalseparator: ',',
        };
        let { tableData, tableFooterData } = this.getReportBody();
        tableData = [header, ...tableData];
        tableData = tableFooterData.length
            ? [...tableData, ...tableFooterData]
            : tableData;
        const data = this.convertToJSON(tableData);
        new Angular2Txt(data, 'Resultados Netos', options);
    }
    getFooterData() {
        const { customTotalRows, customTotalFormatting, customTotalType, customTotalAlign, } = this.footerConfig;
        let tableFooterData = [];
        let rawData = [];
        this.data$.forEach((itemArray) => {
            let rawDataRow = [];
            // Step 1: format - prepare dat
            const formatedData = itemArray.map((item) => this.getFormatDataToTreatment(item));
            // Step 2: Get raw data (values to totals)
            this.getRawData(customTotalRows, formatedData, customTotalType, rawDataRow);
            rawData.push(rawDataRow);
        });
        if (customTotalRows && customTotalRows.length && rawData.length) {
            let procesedTotals = [];
            procesedTotals = this.trasposeMatrix(rawData).map((itemArray) => itemArray.reduce((a, b) => a + b, 0));
            if (customTotalFormatting && customTotalFormatting.length) {
                procesedTotals = customTotalFormatting.map((format, index) => {
                    let value, align;
                    switch (format) {
                        case NumberFormat$1.CUR:
                            value = this.currencyPipe.transform(procesedTotals[index]);
                            break;
                        default:
                            value = procesedTotals[index];
                            break;
                    }
                    align = customTotalAlign[index];
                    return {
                        value,
                        align,
                    };
                });
            }
            tableFooterData = procesedTotals.length ? procesedTotals : null;
        }
        let finalFooterData = [];
        // Clear data
        if (customTotalRows && customTotalRows.length) {
            let cont = 0;
            for (let i = 0; i < this.header.length; i++) {
                let itemToPush;
                customTotalRows.forEach((customIndex) => {
                    if (customIndex === i) {
                        itemToPush = tableFooterData[cont];
                        cont++;
                    }
                });
                finalFooterData.push(itemToPush);
            }
        }
        this.footerRow = finalFooterData;
    }
    exportAsXLSX() {
        this.excelService.exportAsExcelFile(this.excelData, 'planilla_compensacion');
    }
    formatCurrencyToNumber(value) {
        if (value !== undefined && value !== null)
            return Number(String(value).replace(/[^0-9.-]+/g, ''));
    }
    isNumber(value) {
        let regex = /^\d*\.?\d*$/;
        return regex.test(value);
    }
    trasposeMatrix(matrix) {
        return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));
    }
    convertToJSON(array) {
        var objArray = [];
        for (var i = 1; i < array.length; i++) {
            objArray[i - 1] = {};
            for (var k = 0; k < array[0].length && k < array[i].length; k++) {
                var key = array[0][k];
                let actualElement = array[i][k];
                let el = actualElement;
                if (typeof actualElement === 'string') {
                    el = actualElement.replace(/\n/g, ' ');
                }
                else if (typeof actualElement === 'undefined') {
                    el = '';
                }
                objArray[i - 1][key] = el;
            }
        }
        return objArray;
    }
    onBackItem() {
        this.onBack.emit();
    }
}
NextiLibDatatableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nexti-lib-datatable',
                template: "<div class=\"card py-4 px-2 border-light shadow-sm h-full mh-100\">\r\n  <div\r\n    *ngIf=\"isLoading\"\r\n    class=\"spinner-container d-flex align-items-center flex-column text-primary\"\r\n  >\r\n    <div class=\"spinner-border spinner-size\" role=\"status\"></div>\r\n    <span class=\"mt-2 text-dark\">Cargando...</span>\r\n  </div>\r\n  <div class=\"card-body content h-full mh-100\">\r\n    <div class=\"content-header\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <div class=\"header-title\">\r\n          <div *ngIf=\"linkBack\">\r\n            <a class=\"btn primary\" (click)=\"onBackItem()\">\r\n              <h4>\r\n                <i aria-hidden=\"true\" class=\"bi bi-arrow-left back\"></i>\r\n              </h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <div *ngIf=\"breadcrumbs\">\r\n              <lib-breadcrumbs [breadcrumbs]=\"breadcrumbs\"></lib-breadcrumbs>\r\n            </div>\r\n            <div>\r\n              <h5 [ngClass]=\"{ 'title-primary': true, 'text-small': titleXs }\">\r\n                {{ title }}\r\n              </h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <ng-content></ng-content>\r\n          <button\r\n            *ngIf=\"reportConfig || excelData\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary dropdown-toggle\"\r\n            data-bs-toggle=\"dropdown\"\r\n          >\r\n            Exportar a\r\n          </button>\r\n          <ul class=\"dropdown-menu\">\r\n            <ng-container *ngIf=\"!excelData; else showExcelOption\">\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"generatePdf()\">PDF</a>\r\n              </li>\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"generateTxt()\">TXT</a>\r\n              </li>\r\n            </ng-container>\r\n            <ng-template #showExcelOption>\r\n              <li>\r\n                <a class=\"dropdown-item\" (click)=\"exportAsXLSX()\">EXCEL</a>\r\n              </li>\r\n            </ng-template>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <ng-container *ngIf=\"customHeader; else headerOne\">\r\n        <ng-content select=\"[custom-header]\"></ng-content>\r\n      </ng-container>\r\n      <ng-template #headerOne>\r\n        <div class=\"d-flex justify-content-between align-items-center my-4\">\r\n          <div class=\"datos\">\r\n            <div *ngIf=\"infoAdicional\">\r\n              <lib-titlesecondary\r\n                [infoAdicional]=\"infoAdicional\"\r\n              ></lib-titlesecondary>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex flex-row\" *ngIf=\"!opOcultarBuscar\">\r\n            <div\r\n              class=\"px-2 py-auto d-flex align-items-center\"\r\n              *ngIf=\"selectFilter\"\r\n            >\r\n              <select\r\n                [(ngModel)]=\"filterSelected\"\r\n                (change)=\"onFilter()\"\r\n                class=\"form-select custom-select\"\r\n                aria-label=\"filter\"\r\n              >\r\n                <option\r\n                  *ngFor=\"let item of selectFilter\"\r\n                  [selected]=\"item.selected\"\r\n                  [value]=\"item.value\"\r\n                >\r\n                  {{ item.label }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n            <form class=\"d-flex\">\r\n              <div class=\"input-group custom-input-group\">\r\n                <input\r\n                  #search\r\n                  type=\"text\"\r\n                  class=\"form-control custom-input-search\"\r\n                  placeholder=\"Buscar\"\r\n                  aria-label=\"search\"\r\n                  aria-describedby=\"basic-addon1\"\r\n                  (keyup)=\"filter($event.target.value)\"\r\n                />\r\n                <span\r\n                  class=\"input-group-text custom-gruop-text\"\r\n                  id=\"basic-addon1\"\r\n                  ><i aria-hidden=\"true\" class=\"bi bi-search\"></i\r\n                ></span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"multiTable; else oneTable\">\r\n      <div class=\"content-body\">\r\n        <nav class=\"nav-content\">\r\n          <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n            <button\r\n              *ngFor=\"let item of sections; index as i\"\r\n              class=\"nav-link\"\r\n              [ngClass]=\"{ active: i === 0 }\"\r\n              id=\"nav-{{ i }}-tab\"\r\n              data-bs-toggle=\"tab\"\r\n              [attr.data-bs-target]=\"'#nav-' + i\"\r\n              type=\"button\"\r\n              role=\"tab\"\r\n              aria-controls=\"nav-{{ i }}\"\r\n              aria-selected=\"true\"\r\n            >\r\n              {{ item }}\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        <div class=\"tab-content\" id=\"nav-tabContent\">\r\n          <div\r\n            *ngFor=\"let item of header; index as i\"\r\n            [ngClass]=\"{ active: i === 0, show: i === 0 }\"\r\n            class=\"tab-pane fade\"\r\n            id=\"nav-{{ i }}\"\r\n            role=\"tabpanel\"\r\n            aria-labelledby=\"nav-{{ i }}-tab\"\r\n          >\r\n            <nexti-lib-table\r\n              [title]=\"title\"\r\n              [titleEmpty]=\"titleEmpty\"\r\n              [header]=\"item\"\r\n              [data$]=\"data$[i]\"\r\n              [footerConfig]=\"footerConfig[i]\"\r\n              [recursos]=\"recursos\"\r\n              [actionState]=\"actionState\"\r\n              (onDelete)=\"onDeleteItem($event)\"\r\n              (onUpdate)=\"onUpdateItem($event)\"\r\n              (onActive)=\"onActiveItem($event)\"\r\n              (onShow)=\"onShowItem($event)\"\r\n              (onShowEvent)=\"onShowItemEvent($event)\"\r\n              [opOcultarFooter]=\"opOcultarFooter\"\r\n              [hiddenActions]=\"hiddenActions\"\r\n              [isLoading]=\"isLoading\"\r\n              [paginacion]=\"paginacion\"\r\n              [totalRegistros]=\"totalRegistros\"\r\n              [multFPP]=\"multFPP\"\r\n              [actualPage]=\"actualPage\"\r\n              (onNext)=\"onNext()\"\r\n              (onReturn)=\"onReturn()\"\r\n            ></nexti-lib-table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <ng-template #oneTable>\r\n      <div class=\"content-onebody\">\r\n        <nexti-lib-table\r\n          [title]=\"title\"\r\n          [titleEmpty]=\"titleEmpty\"\r\n          [header]=\"header\"\r\n          [data$]=\"data$\"\r\n          [footerConfig]=\"footerConfig\"\r\n          [recursos]=\"recursos\"\r\n          [actionState]=\"actionState\"\r\n          (onDelete)=\"onDeleteItem($event)\"\r\n          (onUpdate)=\"onUpdateItem($event)\"\r\n          (onActive)=\"onActiveItem($event)\"\r\n          (onShow)=\"onShowItem($event)\"\r\n          (onShowEvent)=\"onShowItemEvent($event)\"\r\n          [opOcultarFooter]=\"opOcultarFooter\"\r\n          [hiddenActions]=\"hiddenActions\"\r\n          [isLoading]=\"isLoading\"\r\n          [paginacion]=\"paginacion\"\r\n          [totalRegistros]=\"totalRegistros\"\r\n          [actualPage]=\"actualPage\"\r\n          [multFPP]=\"multFPP\"\r\n          (onNext)=\"onNext($event)\"\r\n          (onReturn)=\"onReturn($event)\"\r\n        ></nexti-lib-table>\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n",
                styles: ["@import \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\";.header-title{display:flex;flex-direction:row}.tab-content{grid-area:tab-content;overflow:hidden}.tab-pane{height:100%}.breadcrumbs{margin:0;padding:0;font-size:12px;line-height:15px;color:#0f1b32}.breadcrumbs span{color:#b0b0b0}.mh-150{min-width:150px}.datos{padding-top:5px}.datos .nombre-banco{font-weight:700;font-size:16px;line-height:20px}.datos .informacion,.datos .nombre-banco{font-style:normal;display:flex;align-items:center;color:#0f1b32}.datos .informacion{font-weight:400;font-size:12px;line-height:15px}.custom-input-group{width:230px}.custom-input-search{border-right:none}.custom-input-search:focus{box-shadow:none;border-color:#ced4da}.custom-gruop-text{background:transparent}.primary{color:#0f1b32}.secondary{color:#2a8bf2}.muted{color:#585858}.mh-100{height:100%!important;max-height:100%!important}.title-primary{font-size:28px!important}.title-primary,h6{font-weight:700!important;color:#0f1b32}.btn.dropdown-toggle{display:block}a.dropdown-item{cursor:pointer}.text-size-sm{font-size:12px}.content{display:grid;width:100%;height:100%;grid-template-rows:auto 1fr;grid-template-areas:\"content-header\" \"content-body\"}.content-header{grid-area:content-header;padding:1rem 0}.content-body{grid-area:content-body;overflow:hidden;display:grid;width:100%;height:100%;grid-template-rows:auto 1fr;grid-template-areas:\"nav-content\" \"tab-content\"}.content-onebody{grid-area:content-body;overflow:hidden}.nav-content{grid-area:nav-content}.text-small{font-size:1.25rem!important}.page-container{position:relative}.page-container .spinner-container{position:absolute;z-index:100;left:50%;top:1vw}.page-container .spinner-container .spinner-size{width:3rem;height:3rem}"]
            },] }
];
NextiLibDatatableComponent.ctorParameters = () => [
    { type: DatePipe },
    { type: CurrencyPipe },
    { type: ExcelService }
];
NextiLibDatatableComponent.propDecorators = {
    header: [{ type: Input }],
    customHeader: [{ type: Input }],
    list: [{ type: Input }],
    titleEmpty: [{ type: Input }],
    title: [{ type: Input }],
    titleXs: [{ type: Input }],
    btnModal: [{ type: Input }],
    recursos: [{ type: Input }],
    selectFilter: [{ type: Input }],
    hiddenActions: [{ type: Input }],
    breadcrumbs: [{ type: Input }],
    infoAdicional: [{ type: Input }],
    linkBack: [{ type: Input }],
    reportConfig: [{ type: Input }],
    opOcultarBuscar: [{ type: Input }],
    opOcultarFooter: [{ type: Input }],
    footerConfig: [{ type: Input }],
    actionState: [{ type: Input }],
    paginacion: [{ type: Input }],
    totalRegistros: [{ type: Input }],
    multFPP: [{ type: Input }],
    actualPage: [{ type: Input }],
    excelData: [{ type: Input }],
    multiTable: [{ type: Input }],
    sections: [{ type: Input }],
    isLoading: [{ type: Input }],
    onDelete: [{ type: Output }],
    onUpdate: [{ type: Output }],
    onActive: [{ type: Output }],
    onShow: [{ type: Output }],
    onShowEvent: [{ type: Output }],
    onBack: [{ type: Output }],
    onfilter: [{ type: Output }],
    onNext: [{ type: Output }],
    onReturn: [{ type: Output }],
    inputSearch: [{ type: ViewChild, args: ['search',] }],
    datatable: [{ type: ViewChildren, args: [TableComponent,] }]
};

class BreadcrumbsComponent {
    constructor() {
        this.breadcrumbs = [];
    }
    ngOnInit() {
    }
}
BreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-breadcrumbs',
                template: "\r\n<ul class=\"navega\">\r\n    <li *ngFor=\"let item of breadcrumbs\">\r\n        <a *ngIf=\"item.link\" href=\"{{item.link}}\">{{item.title}}</a>\r\n        <span *ngIf=\"!item.link\">{{item.title}}</span>\r\n    </li>\r\n</ul>\r\n",
                styles: [".breadcrumbs{margin:0;padding:0;font-size:12px;line-height:15px;color:#0f1b32}.breadcrumbs span{color:#b0b0b0}.navega{padding:0;margin:0;display:flex;list-style:none}.navega li{margin:0;padding-right:3px;font-size:12px;line-height:15px}.navega a{color:#0f1b32;text-decoration:none}.navega span{color:#b0b0b0}"]
            },] }
];
BreadcrumbsComponent.ctorParameters = () => [];
BreadcrumbsComponent.propDecorators = {
    breadcrumbs: [{ type: Input }]
};

class TitlesecondaryComponent {
    constructor() {
        this.infoAdicional = [];
        this.title = '';
        this.subtitle = '';
    }
    ngOnChanges(changes) {
        var _a, _b;
        const { infoAdicional } = changes;
        if ((infoAdicional === null || infoAdicional === void 0 ? void 0 : infoAdicional.currentValue) !== (infoAdicional === null || infoAdicional === void 0 ? void 0 : infoAdicional.previousValue)) {
            this.title = (_a = this.infoAdicional[0]) === null || _a === void 0 ? void 0 : _a.title;
            this.subtitle = (_b = this.infoAdicional[0]) === null || _b === void 0 ? void 0 : _b.subtitle;
        }
    }
    ngOnInit() {
        var _a, _b;
        this.title = (_a = this.infoAdicional[0]) === null || _a === void 0 ? void 0 : _a.title;
        this.subtitle = (_b = this.infoAdicional[0]) === null || _b === void 0 ? void 0 : _b.subtitle;
    }
}
TitlesecondaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-titlesecondary',
                template: "<h5 class=\"nombre-banco\">{{ title }}</h5>\r\n<p class=\"informacion\">\r\n  {{ subtitle }}\r\n</p>\r\n",
                styles: [".nombre-banco{font-weight:700;font-size:16px;line-height:20px}.informacion,.nombre-banco{font-style:normal;display:flex;align-items:center;color:#0f1b32}.informacion{font-weight:400;font-size:12px;line-height:15px}"]
            },] }
];
TitlesecondaryComponent.ctorParameters = () => [];
TitlesecondaryComponent.propDecorators = {
    infoAdicional: [{ type: Input }]
};

class NextiLibDatatableModule {
}
NextiLibDatatableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NextiLibDatatableComponent,
                    BreadcrumbsComponent,
                    TitlesecondaryComponent,
                    TableComponent,
                ],
                imports: [FormsModule, CommonModule, NgSelectModule],
                exports: [NextiLibDatatableComponent],
                providers: [DatePipe, CurrencyPipe],
            },] }
];

/*
 * Public API Surface of nexti-lib-datatable
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NextiLibDatatableComponent, NextiLibDatatableModule, TableComponent as ɵa, ExcelService as ɵb, BreadcrumbsComponent as ɵc, TitlesecondaryComponent as ɵd };
//# sourceMappingURL=nexti-lib-datatable.js.map
